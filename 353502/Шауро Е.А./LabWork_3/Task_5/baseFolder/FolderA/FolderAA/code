from rest_framework import serializers

from users.models import UserProfile, BusinessEmployeeProfile, OwnerProfile
from users.models.user import User
from users.serializers import EmployeeProfileSerializer, OwnerProfileSerializer


class UsersInBranchSerializer(serializers.ModelSerializer):
    profile = serializers.SerializerMethodField()
    role_in_branch = serializers.SerializerMethodField()

    class Meta:
        model = User
        fields = [
            'id',
            'email',
            'username',
            'is_owner',
            'is_employee',
            'profile',
            'role_in_branch',
        ]

    def get_profile(self, obj):
        user_profile =  UserProfile.objects.get(user=obj)

        serializer = None

        if obj.is_employee:
            profile = BusinessEmployeeProfile.objects.get(userprofile_ptr_id=user_profile.pk)
            serializer = EmployeeProfileSerializer(profile)
        if obj.is_owner:
            profile = OwnerProfile.objects.get(userprofile_ptr_id=user_profile.pk)
            serializer = OwnerProfileSerializer(profile)
        if obj.is_superuser:
            profile = OwnerProfile.objects.get(userprofile_ptr_id=user_profile.pk)
            serializer = OwnerProfileSerializer(profile)

        return serializer.data

    def get_role_in_branch(self, obj):
        role_in_branch = obj.UserBusinessBranchRole.objects.get(
            user=obj,
            business_branch=self.context['business_branch'])
        assert isinstance(role_in_branch.role, object)
        return role_in_branch.role

from rest_framework.exceptions import PermissionDenied
from rest_framework.permissions import IsAuthenticated
from users.permissions.user_block import UserBlock
from users.permissions.is_owner import IsOwner
from rest_framework.response import Response
from pro_actify.swwager_service.auto_schema import apply_swagger_auto_schema
from rest_framework import generics
from rest_framework import status

from business.serializers.business_branch_serializer import BusinessBranchSerializer
from business.serializers import UsersInBranchSerializer
from business.models import UserBusinessBranchRole, BusinessBranch


class UsersInBranchView(generics.GenericAPIView):
    serializer_class = UsersInBranchSerializer
    permission_classes = [IsAuthenticated, UserBlock, IsOwner]

    def get_permissions(self):
        permission = super().get_permissions()
        user = self.request.user

        if not user.is_active:
            raise PermissionDenied(detail="You do not have permission to perform this")

        return permission


    def get(self, request, *args, **kwargs):
        business_id = self.kwargs['business_id']
        user = request.user

        if user.is_owner:
            business_branch = BusinessBranch.objects.get(id=business_id, owner=request.user)
            if business_branch:

                roles = UserBusinessBranchRole.objects.filter(business_branch__business=business_branch)
                employees = roles.exclude(user=request.user)
                serializer = UsersInBranchSerializer(employees, many=True)

                return Response(serializer.data)
            else:
                return Response({"message": "Business not found or you are not the owner of this business."},
                                status=status.HTTP_400_BAD_REQUEST)
        else:
            return Response({"message": "You are not the owner of any business."},
                            status=status.HTTP_400_BAD_REQUEST)


UsersInBranchView = apply_swagger_auto_schema(
    tags=['users-in-branch'], excluded_methods=[]
)(UsersInBranchView)




UsersInBranchView = apply_swagger_auto_schema(
    tags=['users-in-branch'], excluded_methods=[]
)(UsersInBranchView)



from .users_in_branch_serializer import UsersInBranchSerializer # noqa
